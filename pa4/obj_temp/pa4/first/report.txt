To keep everything consistent and clean from global variables, I decided to use a 2d array of nodes that holds a valid bit, tag, and the count of the bit to keep track of which bit was first inputted in for replacement policy. This can be done very easily in a 2d array since we can represent the rows as log2(setNum) (direct: setNum = cacheSize/blockSize, fully associative: 1, n way associative: (cacheSize/blockSize)/power) and columns as associativity (direct: 1, fully associative: cacheSize/blockSize, n way associative: power). After the coding project was complete, we can clearly see the difference between a cache with no prefetch and a cache with prefetch. Despite the more read ins that the cache with prefetch has, there is a great improvement in the number of cache hits and a decreased amount of cache misses. This is because in prefetch, we are adding another address (address+blocksize) if there is a miss. So if there were an address that was already read in as a prefetched address, the cache does not declare it as a miss and gives a hit instead. On the contrary, for no prefetch, there are less reads since we are not prefetching the extra address. This results in less hits since there are less addresses being added into the cache which results in more misses.
